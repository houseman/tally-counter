# An action to run continuous integration checks
name: Run Continuous Integration Checks

on:
  push:

permissions:
  contents: write # allows the action to create a release

jobs:
  # Get the HEAD branch semantic version
  head-branch-version:
    runs-on: ubuntu-latest
    # Map outputs to environment variables
    outputs:
      HEAD_VERSION: ${{ steps.set-head-version.outputs.HEAD_VERSION }}
      HEAD_OFF_MAIN: ${{ steps.set-head-off-main.outputs.HEAD_OFF_MAIN }}
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Pip install this package
        run: |
          python -m pip install --upgrade pip
          pip install .

      - name: Set HEAD_VERSION
        id: set-head-version
        run: echo "HEAD_VERSION=$(python -c 'import tally_counter; print(tally_counter.__version__)')" >> "$GITHUB_OUTPUT"

      - name: Fetch main branch
        run: |
          git fetch origin main:main
          git branch -a
          git log --oneline -5

      - name: Print commit history for debugging
        run: |
          echo "Commit history for main branch:"
          git log origin/main --oneline -5
          echo "Commit history for current branch:"
          git log --oneline -5

      - name: Set HEAD_OFF_MAIN
        id: set-head-off-main
        if: ${{ github.ref != 'refs/heads/main' }} # Skip if "main"
        run: |
          git fetch origin main:main
          if git merge-base --is-ancestor main HEAD; then
            echo "HEAD_OFF_MAIN=1" >> "$GITHUB_OUTPUT"
            echo "HEAD_OFF_MAIN=1"
          else
            echo "HEAD_OFF_MAIN=0" >> "$GITHUB_OUTPUT"
            echo "HEAD_OFF_MAIN=0"
          fi

  # Check that the package version is bumped up from the version in "main", if current branch is not "main"
  version-check:
    runs-on: ubuntu-latest
    needs: head-branch-version
    # Run a semantic version check if this push is to a main descendant
    if: ${{ needs.head-branch-version.outputs.HEAD_OFF_MAIN == '1' }}
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Checkout main branch
        run: |
          git fetch origin main:main
          git checkout main

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip semver
          pip install .

      - name: Set MAIN_VERSION
        id: set-main-version
        run: echo "MAIN_VERSION=$(python -c 'import tally_counter; print(tally_counter.__version__)')" >> "$GITHUB_OUTPUT"

      - name: Compare HEAD_VERSION > MAIN_VERSION
        env:
          MAIN_VERSION: ${{ steps.set-main-version.outputs.MAIN_VERSION }}
          HEAD_VERSION: ${{ needs.head-branch-version.outputs.HEAD_VERSION }}
        run: python -c "import semver; assert semver.compare('${{ env.HEAD_VERSION }}', '${{ env.MAIN_VERSION }}') > 0, 'Version not bumped'"

  # Run linting and tests on all operating systems and supported Python versions
  run-ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} + Nox om ${{ matrix.os }}
        uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "${{ matrix.python-version }}"

      - name: Run CI checks
        run: |
          nox --python "${{ matrix.python-version }}"

  # Create a new release if branch is "main"
  release:
    needs: [head-branch-version, run-ci]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} # Only create a release if the push branch is "main"
    steps:
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HEAD_VERSION: ${{ needs.head-branch-version.outputs.HEAD_VERSION }}
        with:
          tag_name: "v${{ env.HEAD_VERSION }}"
          release_name: "v${{ env.HEAD_VERSION }}"
          draft: false
          prerelease: false
